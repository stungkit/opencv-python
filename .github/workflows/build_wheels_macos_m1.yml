name: Build PYPI wheels for opencv-python on Macos M1

on:
  pull_request:
    branches:
      - master
      - 3.4
    paths-ignore:
      - '.github/workflows/build_wheels_linux*'
      - '.github/workflows/build_wheels_windows*'
      - '.github/workflows/build_wheels_macos.yml'
  release:
    types: [published, edited]


jobs:
  build:
    runs-on: opencv-cn-mac-arm64
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.7']
        platform: [x64]
        with_contrib: [0, 1]
        without_gui: [0, 1]
        build_sdist: [0]
    env:
      CI_BUILD: 1
      SDIST: ${{ matrix.build_sdist || 0 }}
      ENABLE_HEADLESS: ${{ matrix.without_gui }}
      ENABLE_CONTRIB: ${{ matrix.with_contrib }}
    steps:
    - name: Cleanup
      run: find . -mindepth 1 -delete
      working-directory: ${{ github.workspace }}
    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: false
        fetch-depth: 0
    - name: Update submodules
      if: github.event_name == 'pull_request'
      run: git submodule update --remote
    - name: Build a package
      run: |
        git submodule update --init multibuild
        echo $ENABLE_CONTRIB > contrib.enabled
        echo $ENABLE_HEADLESS > headless.enabled
        export MACOSX_DEPLOYMENT_TARGET=11.0
        arch -arm64 python${{ matrix.python-version }} -m pip install toml && python${{ matrix.python-version }} -c 'import toml; c = toml.load("pyproject.toml"); print("\n".join(c["build-system"]["requires"]))' | python${{ matrix.python-version }} -m pip install -r /dev/stdin
        arch -arm64 python${{ matrix.python-version }} setup.py bdist_wheel --py-limited-api=cp37 --dist-dir=wheelhouse -v
        delocate-wheel ${{ github.workspace }}/wheelhouse/opencv*
    - name: Saving all wheels
      uses: actions/upload-artifact@v2
      with:
        name: wheels
        path: wheelhouse/opencv*.whl
    - name: Saving a wheel accordingly to matrix
      uses: actions/upload-artifact@v2
      with:
        name: wheel-${{ matrix.with_contrib }}-${{ matrix.without_gui }}-${{ matrix.build_sdist }}
        path: wheelhouse/opencv*.whl

  test:
    needs: [build]
    runs-on: opencv-cn-mac-arm64-tests
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10']
        platform: [x64]
        with_contrib: [0, 1]
        without_gui: [0, 1]
        build_sdist: [0]
    env:
      OPENCV_TEST_DATA_PATH: ${{ github.workspace }}/opencv_extra/testdata
      PYLINT_TEST_FILE: ${{ github.workspace }}/opencv/samples/python/squares.py
    steps:
    - name: Cleanup
      run: find . -mindepth 1 -delete
      working-directory: ${{ github.workspace }}
    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: true
        fetch-depth: 0
    - name: Download a wheel accordingly to matrix
      uses: actions/download-artifact@v2
      with:
        name: wheel-${{ matrix.with_contrib }}-${{ matrix.without_gui }}-${{ matrix.build_sdist }}
        path: wheelhouse/
    - name: Package installation
      run: |
        arch -arm64 python${{ matrix.python-version }} -m pip install --user --no-cache --force-reinstall wheelhouse/opencv*.whl
        cd ${{ github.workspace }}/tests
        arch -arm64 python${{ matrix.python-version }} get_build_info.py
    - name: Run tests
      run: |
        cd ${{ github.workspace }}/opencv
        arch -arm64 python${{ matrix.python-version }} modules/python/test/test.py -v --repo .
    - name: Pylint test
      run: |
        arch -arm64 python${{ matrix.python-version }} -m pip install pylint==2.12.2
        cd ${{ github.workspace }}/tests
        arch -arm64 python${{ matrix.python-version }} -m pylint $PYLINT_TEST_FILE

  test_release_opencv_python:
    if: github.event_name == 'release' && github.event.release.prerelease
    needs: [build, test]
    runs-on: ubuntu-20.04
    environment: test-opencv-python-release
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: wheels
          path: wheelhouse/

      - name: Upload all wheels
        run: |
          python -m pip install twine
          python -m twine upload --repository testpypi -u ${{ secrets.PYPI_USERNAME }} -p ${{ secrets.PYPI_PASSWORD }} --skip-existing wheelhouse/opencv_*

  release_opencv_python:
    if: github.event_name == 'release' && !github.event.release.prerelease
    needs: [build, test]
    runs-on: ubuntu-20.04
    environment: opencv-python-release
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: wheels
          path: wheelhouse/
      - name: Upload wheels for opencv_python
        run: |
          python -m pip install twine
          python -m twine upload -u ${{ secrets.OPENCV_PYTHON_USERNAME }} -p ${{ secrets.OPENCV_PYTHON_PASSWORD }} --skip-existing wheelhouse/opencv_python-*
      - name: Upload wheels for opencv_contrib_python
        run: |
          python -m pip install twine
          python -m twine upload -u ${{ secrets.OPENCV_CONTRIB_PYTHON_USERNAME }} -p ${{ secrets.OPENCV_CONTRIB_PYTHON_PASSWORD }} --skip-existing wheelhouse/opencv_contrib_python-*
      - name: Upload wheels for opencv_python_headless
        run: |
          python -m pip install twine
          python -m twine upload -u ${{ secrets.OPENCV_PYTHON_HEADLESS_USERNAME }} -p ${{ secrets.OPENCV_PYTHON_HEADLESS_PASSWORD }} --skip-existing wheelhouse/opencv_python_headless-*
      - name: Upload wheels for opencv_contrib_python_headless
        run: |
          python -m pip install twine
          python -m twine upload -u ${{ secrets.OPENCV_CONTRIB_PYTHON_HEADLESS_USERNAME }} -p ${{ secrets.OPENCV_CONTRIB_PYTHON_HEADLESS_PASSWORD }} --skip-existing wheelhouse/opencv_contrib_python_headless-*
