name: Build PYPI wheels for opencv-python on Linux ARM

on:
  pull_request:
    branches:
      - master
      - 3.4
    paths-ignore:
      - '.github/workflows/build_wheels_linux.yml'
      - '.github/workflows/build_wheels_windows*'
      - '.github/workflows/build_wheels_macos*'
  release:
    types: [published, edited]


jobs:
  build_arm:
    runs-on: opencv-cn-lin-arm64
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.6']
        platform: [x64]
        with_contrib: [0, 1]
        without_gui: [0, 1]
        build_sdist: [0]
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      REPO_DIR: .
      BUILD_COMMIT: master
      PROJECT_SPEC: opencv-python
      MB_PYTHON_VERSION: ${{ matrix.python-version }}
      TRAVIS_PYTHON_VERSION: ${{ matrix.python-version }}
      PLAT: aarch64
      MB_ML_VER: 2014
      TRAVIS_BUILD_DIR: ${{ github.workspace }}
      CONFIG_PATH: travis_config.sh
      DOCKER_IMAGE: quay.io/opencv-ci/opencv-python-manylinux2014-aarch64:20220628
      USE_CCACHE: 0
      UNICODE_WIDTH: 32
      SDIST: ${{ matrix.build_sdist || 0 }}
      ENABLE_HEADLESS: ${{ matrix.without_gui }}
      ENABLE_CONTRIB: ${{ matrix.with_contrib }}
    steps:
    - name: UID
      run: id -u
    - name: Cleanup
      run: find . -mindepth 1 -delete
      working-directory: ${{ github.workspace }}
    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: false
        fetch-depth: 0
    - name: Build a package
      run: source scripts/build.sh
    - name: Saving all wheels
      uses: actions/upload-artifact@v2
      with:
        name: wheels
        path: wheelhouse/opencv*.whl
    - name: Saving a wheel accordingly to matrix
      uses: actions/upload-artifact@v2
      with:
        name: wheel-${{ matrix.with_contrib }}-${{ matrix.without_gui }}-${{ matrix.build_sdist }}
        path: wheelhouse/opencv*.whl

  test:
    needs: [build_arm]
    runs-on: opencv-cn-lin-arm64
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.6', '3.7', '3.8', '3.9', '3.10']
        platform: [x64]
        with_contrib: [0, 1]
        without_gui: [0, 1]
        build_sdist: [0]
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      MB_PYTHON_VERSION: ${{ matrix.python-version }}
      PLAT: aarch64
      NP_TEST_DEP: numpy==1.19.4
      NP_TEST_DEP_LATEST: numpy==1.21.4
      CONFIG_PATH: travis_config.sh
      DOCKER_TEST_IMAGE: multibuild/focal_arm64v8
      UNICODE_WIDTH: 32
    steps:
    - name: Cleanup
      run: find . -mindepth 1 -delete
      working-directory: ${{ github.workspace }}
    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: true
        fetch-depth: 0
    - name: Setup Environment variables
      run: if [ "3.10" == "${{ matrix.python-version }}" ]; then echo "TEST_DEPENDS=$(echo $NP_TEST_DEP_LATEST)" >> $GITHUB_ENV; else echo "TEST_DEPENDS=$(echo $NP_TEST_DEP)" >> $GITHUB_ENV; fi
    - name: Download a wheel accordingly to matrix
      uses: actions/download-artifact@v2
      with:
        name: wheel-${{ matrix.with_contrib }}-${{ matrix.without_gui }}-${{ matrix.build_sdist }}
        path: wheelhouse/
    - name: Package installation and run tests
      run: source scripts/install.sh

  test_release_opencv_python:
    if: github.event_name == 'release' && github.event.release.prerelease
    needs: [build_arm, test]
    runs-on: ubuntu-20.04
    environment: test-opencv-python-release
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: wheels
          path: wheelhouse/
      - name: Upload all wheels
        run: |
          python -m pip install twine
          python -m twine upload --repository testpypi -u ${{ secrets.PYPI_USERNAME }} -p ${{ secrets.PYPI_PASSWORD }} --skip-existing wheelhouse/opencv_*

  release_opencv_python:
    if: github.event_name == 'release' && !github.event.release.prerelease
    needs: [build_arm, test]
    runs-on: ubuntu-20.04
    environment: opencv-python-release
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: wheels
          path: wheelhouse/
      - name: Upload wheels for opencv_python
        run: |
          python -m pip install twine
          python -m twine upload -u ${{ secrets.OPENCV_PYTHON_USERNAME }} -p ${{ secrets.OPENCV_PYTHON_PASSWORD }} --skip-existing wheelhouse/opencv_python-*
      - name: Upload wheels for opencv_contrib_python
        run: |
          python -m pip install twine
          python -m twine upload -u ${{ secrets.OPENCV_CONTRIB_PYTHON_USERNAME }} -p ${{ secrets.OPENCV_CONTRIB_PYTHON_PASSWORD }} --skip-existing wheelhouse/opencv_contrib_python-*
      - name: Upload wheels for opencv_python_headless
        run: |
          python -m pip install twine
          python -m twine upload -u ${{ secrets.OPENCV_PYTHON_HEADLESS_USERNAME }} -p ${{ secrets.OPENCV_PYTHON_HEADLESS_PASSWORD }} --skip-existing wheelhouse/opencv_python_headless-*
      - name: Upload wheels for opencv_contrib_python_headless
        run: |
          python -m pip install twine
          python -m twine upload -u ${{ secrets.OPENCV_CONTRIB_PYTHON_HEADLESS_USERNAME }} -p ${{ secrets.OPENCV_CONTRIB_PYTHON_HEADLESS_PASSWORD }} --skip-existing wheelhouse/opencv_contrib_python_headless-*
